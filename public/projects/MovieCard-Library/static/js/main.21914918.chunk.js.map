{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","id","imagePath","rating","title","subtitle","storyline","data-testid","key","className","src","alt","to","pathname","state","React","Component","Loading","movies","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","MovieList","getMovies","a","loadedMovies","push","setState","type","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","MovieDetails","getMovieData","match","params","movieAPI","deleteMovie","filter","status","fetchData","undefined","NewMovie","newMovieAdded","EditMovie","shouldRedirect","update","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21914918.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id, imagePath, rating, title, subtitle, storyline } = movie;\n    return (\n      <div data-testid=\"movie-card\" key={ id } className=\"movie-card card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title is-centered\">\n            { title }\n          </h3>\n          <h4 className=\"card-header-subtitle\">\n            { subtitle }\n          </h4>\n        </div>\n        <img src={ imagePath } alt={ title } className=\"card-image\" />\n        <p className=\"card-content\">\n          {storyline}\n        </p>\n        <div className=\"card-footer\">\n          <Link to={ { pathname: `movies/${id}`, state: id } } className=\"card-footer-item\">\n            VER DETALHES\n          </Link>\n          <p className=\"card-footer-item\">\n            { rating }\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  getMovies = async () => {\n    const { movies } = this.state;\n    const loadedMovies = await movieAPI.getMovies();\n    movies.push(...loadedMovies);\n    this.setState({ movies });\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <>\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          {movies.length > 0 ? movies\n            .map((movie) => (<MovieCard\n              key={ movie.id }\n              movie={ movie }\n            />)) : <Loading />}\n        </div>\n        <div className=\"button-box\">\n          <button type=\"button\" className=\"button is-primary\">\n            <Link to=\"/movies/new\">\n              ADICIONAR CARTÃO\n            </Link>\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape(),\n  onSubmit: PropTypes.func,\n}.isRequired;\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movie: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getMovieData();\n  }\n\n  getMovieData = async () => {\n    const { match: { params: { id } } } = this.props;\n    let { movie } = this.state;\n    movie = await movieAPI.getMovie(id);\n    this.setState({ movie });\n  }\n\n  deleteMovie = () => {\n    const { movie: { id } } = this.state;\n    movieAPI.deleteMovie(id);\n  }\n\n  fetchData = () => {\n    const { movie } = this.state;\n    if (movie !== ('' || undefined)) {\n      const { title, imagePath, subtitle, storyline, genre, rating, id } = movie;\n      return (\n        <div data-testid=\"movie-details\">\n          <Link to=\"/\"> VOLTAR </Link>\n          <br />\n          <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n          <p>{ title }</p>\n          <p>{ subtitle }</p>\n          <p>{ storyline }</p>\n          <p>{ genre }</p>\n          <p>{ rating }</p>\n          <button type=\"button\">\n            <Link to={ `${id}/edit` }>\n              EDITAR\n            </Link>\n          </button>\n          <Link to=\"/\" onClick={ this.deleteMovie }>DELETAR</Link>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    const { movie } = this.state;\n    return (movie !== '' ? this.fetchData() : <Loading />);\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    const newMovieAdded = await movieAPI.createMovie(newMovie);\n    this.setState({ status: newMovieAdded });\n  }\n\n  render() {\n    const { status } = this.state;\n    if (status === 'OK') {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\">\n        <h1>Novo Filme</h1>\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieForm } from '../components';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const update = await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n    return update;\n  }\n\n  getMovies = async () => {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    this.setState({ movie, status: 'done' });\n  }\n\n  render() {\n    const { shouldRedirect, status, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"edit-movie\">\n        <h1>Editar Filme</h1>\n        {status === 'done' ? <MovieForm\n          movie={ movie }\n          onSubmit={ this.handleSubmit }\n        /> : <Loading />}\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" exact component={ NewMovie } />\n        <Route path=\"/movies/:id\" exact component={ MovieDetails } />\n        <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}